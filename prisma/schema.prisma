generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id        Int              @id @default(autoincrement())
  first_name     String?
  mid_name       String?
  last_name      String?
  ext_name       String?
  email          String           @unique
  profile_picture String?
  role           String?
  password       String
  created_at     DateTime?
  faculty        faculty?
  students       students?
  librarian      librarian?
  user_bookmarks user_bookmarks[]
  activity_logs activity_logs[]
}

model faculty {
  employee_id Int     @id @unique
  position    String?
  department  String?
  user_id     Int     @unique
  users       users   @relation(fields: [user_id], references: [user_id])
}

model students {
  student_num BigInt  @id @unique
  program     String?
  college     String?
  year_level  Int?
  user_id     Int     @unique
  users       users   @relation(fields: [user_id], references: [user_id])
}

model librarian {
  employee_id  Int @id @unique
  position    String?
  contact_num  Int
  user_id     Int @unique
  users       users      @relation(fields: [user_id], references: [user_id])
  activity_logs activity_logs[]

}

model papers {
  paper_id       Int              @id @default(autoincrement())
  title          String?
  author         String?
  year           Int?
  department     String?
  keywords       String[]
  course         String?
  abstract       String?
  created_at     DateTime?
  updated_at     DateTime?
  paper_url      String?
  paper_metadata paper_metadata[]
  user_bookmarks user_bookmarks[]
  paper_bm25_index paper_bm25_index[]
  term_score     term_score[]
}

model paper_metadata {
  metadata_id Int     @id @default(autoincrement())
  paper_id    Int
  type        String?
  format      String?
  language    String?
  source      String?
  rights      String?
  papers      papers  @relation(fields: [paper_id], references: [paper_id])
}

model user_bookmarks {
  bookmark_id Int       @id @default(autoincrement())
  user_id     Int
  paper_id    Int
  created_at  DateTime?
  updated_at  DateTime?
  papers      papers    @relation(fields: [paper_id], references: [paper_id])
  users       users     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, paper_id])
}

model Otp {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model paper_bm25_index {
  index_id         Int      @id @default(autoincrement())
  paper_id         Int
  token_frequencies Json
  document_length  Int

  papers           papers   @relation(fields: [paper_id], references: [paper_id], onDelete: Cascade)
}

model term_score {
  id        Int     @id @default(autoincrement())
  term      String
  tf        Float
  tfidf     Float
  bm25      Float
  paper_id  Int

  papers    papers  @relation(fields: [paper_id], references: [paper_id], onDelete: Cascade)
}

model activity_logs {
  act_id          Int       @id @default(autoincrement()) 
  employee_id     Int 
  user_id         Int
  name        String
  activity    String
  created_at  DateTime  @default(now())
  activity_type activity_type?
  user_agent  String?
  ip_address  String?
  status      String?
  librarian   librarian @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
  users       users     @relation(fields: [user_id], references: [user_id])
}


model global_stats {
  id             Int      @id @default(autoincrement())
  total_docs     Int
  avg_doc_length Float
  updated_at     DateTime @updatedAt
}

enum activity_type {
  LOGIN
  LOGOUT
  VIEW_DOCUMENT
  DOWNLOAD_DOCUMENT
  CHANGE_PASSWORD
  ADD_USER
  DELETE_USER
  MODIFY_USER
  DELETE_DOCUMENT
  UPDATE_DOCUMENT
  UPLOAD_DOCUMENT
}
